// Generated by LiveScript 1.2.0
'use strict';
var _toString;
_toString = Object.prototype.toString;
exports.getType = function(o){
  return _toString.call(o).slice(8, -1);
};
exports.isType = curry$(function(t, o){
  return _toString.call(o).slice(8, -1) === t;
});
exports.string = require('./string');
exports.array = require('./array');
exports.object = require('./object');
exports.func = require('./func');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}