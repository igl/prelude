// Generated by LiveScript 1.2.0
'use strict';
var isType, curry, empty, clone, each, map, filter, partition, unique, uniqueBy, flatten, difference, intersection, union, countBy, groupBy, sortBy, splitAt, indexOf, IndicesOf, findIndex, findIndices, range, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./type').isType;
curry = require('./func').curry;
out$.empty = empty = function(xs){
  return xs.length === 0;
};
out$.clone = clone = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(x);
  }
  return results$;
};
out$.each = each = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    f(x, i);
  }
  return xs;
});
out$.map = map = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    results$.push(f(x, i));
  }
  return results$;
});
out$.filter = filter = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x, i)) {
      results$.push(x);
    }
  }
  return results$;
});
out$.partition = partition = curry(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
out$.unique = unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
out$.uniqueBy = uniqueBy = curry(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
out$.flatten = flatten = curry(function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (isType('Array', x)) {
      result.push(flatten(x));
    } else {
      result.push(x);
    }
  }
  return result;
});
out$.difference = difference = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    result.push(x);
  }
  return result;
};
out$.intersection = intersection = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        if (!in$(x, ys)) {
          continue outer;
        }
      }
    }
    result.push(x);
  }
  return result;
};
out$.union = union = function(){
  var xss, result, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  result = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (in$(!x, result)) {
        result.push(x);
      }
    }
  }
  return result;
};
out$.countBy = countBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key] += 1;
    } else {
      result[key] = 1;
    }
  }
  return result;
});
out$.groupBy = groupBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key].push(x);
    } else {
      result[key] = [x];
    }
  }
  return result;
});
out$.sortBy = sortBy = curry(function(f, xs){
  return xs.concat().sort(function(x, y){
    var a, b;
    a = f(x);
    b = f(y);
    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    } else {
      return 0;
    }
  });
});
out$.splitAt = splitAt = curry(function(n, xs){
  if (n < 0) {
    n = 0;
  }
  return [xs.slice(0, n), xs.slice(n)];
});
out$.indexOf = indexOf = curry(function(elem, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      return i;
    }
  }
});
out$.IndicesOf = IndicesOf = curry(function(elem, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      results$.push(i);
    }
  }
  return results$;
});
out$.findIndex = findIndex = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
out$.findIndices = findIndices = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
out$.range = range = curry(2, function(a, b, inc){
  var i$, x, results$ = [];
  inc == null && (inc = 1);
  if (arguments.length === 1) {
    b = a || 0;
    a = 0;
  }
  for (i$ = a; inc < 0 ? i$ > b : i$ < b; i$ += inc) {
    x = i$;
    results$.push(x);
  }
  return results$;
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}