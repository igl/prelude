// Generated by LiveScript 1.3.0
'use strict';
var isType, curry, _hasOwnProperty, empty, clone, keys, values, each, map, filter, partition, keyOf, keysOf, findKey, findKeys, fromPairs, toPairs, hasOwnProperty, mixin, deepMixin, fill, deepFill, freeze, deepFreeze, toString, parseString, fromString, definePublic, definePrivate, defineStatic, defineMeta, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./types').isType;
curry = require('./funcs').curry;
_hasOwnProperty = Object.prototype.hasOwnProperty;
out$.empty = empty = function(obj){
  var k;
  for (k in obj) {
    return false;
  }
  return true;
};
out$.clone = clone = function(obj){
  return deepMixin(null, obj);
};
out$.keys = keys = function(obj){
  var k, results$ = [];
  for (k in obj) {
    results$.push(k);
  }
  return results$;
};
out$.values = values = function(obj){
  var i$, v, results$ = [];
  for (i$ in obj) {
    v = obj[i$];
    results$.push(v);
  }
  return results$;
};
out$.each = each = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    f(v, k);
  }
  return obj;
});
out$.map = map = curry(function(f, obj){
  var k, v, resultObj$ = {};
  for (k in obj) {
    v = obj[k];
    resultObj$[k] = f(v, k);
  }
  return resultObj$;
});
out$.filter = filter = curry(function(f, object){
  var k, v, resultObj$ = {};
  for (k in object) {
    v = object[k];
if (f(v, k)) {
      resultObj$[k] = v;
    }
  }
  return resultObj$;
});
out$.partition = partition = curry(function(f, object){
  var passed, failed, k, v;
  passed = {};
  failed = {};
  for (k in object) {
    v = object[k];
    (f(v, k) ? passed : failed)[k] = v;
  }
  return [passed, failed];
});
out$.keyOf = keyOf = curry(function(elem, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (v === elem) {
      return k;
    }
  }
});
out$.keysOf = keysOf = curry(function(elem, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (v === elem) {
      results$.push(k);
    }
  }
  return results$;
});
out$.findKey = findKey = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (f(v, k)) {
      return k;
    }
  }
});
out$.findKeys = findKeys = curry(function(f, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (f(v, k)) {
      results$.push(k);
    }
  }
  return results$;
});
out$.fromPairs = fromPairs = function(xs){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
out$.toPairs = toPairs = function(obj){
  var key, value, results$ = [];
  for (key in obj) {
    value = obj[key];
    results$.push([key, value]);
  }
  return results$;
};
out$.hasOwnProperty = hasOwnProperty = curry(function(key, obj){
  return _hasOwnProperty.call(obj, key);
});
out$.mixin = mixin = curry(2, function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      dest[key] = val;
    }
  }
  return dest;
});
out$.deepMixin = deepMixin = curry(2, function(dest){
  var sources, i$, len$, src, k, v;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in src) {
      v = src[k];
      if (isType('Object', dest[k]) && isType('Object', v)) {
        dest[k] = deepMixin(dest[k], v);
      } else {
        dest[k] = v;
      }
    }
  }
  return dest;
});
out$.fill = fill = curry(2, function(dest){
  var sources, i$, len$, src, k;
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in dest) {
      if (src[k] != null) {
        dest[k] = src[k];
      }
    }
  }
  return dest;
});
out$.deepFill = deepFill = curry(2, function(dest){
  var sources, i$, len$, src, k;
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in dest) {
      if (dest[k] != null) {
        if (isType('Object', dest[key]) && isType('Object', v)) {
          dest[k] = deepFill(dest[k], src[k]);
        } else {
          dest[k] = src[k];
        }
      }
    }
  }
  return dest;
});
out$.freeze = freeze = function(obj){
  return Object.freeze(obj);
};
out$.deepFreeze = deepFreeze = function(obj){
  var key, value;
  if (!Object.isFrozen(obj)) {
    Object.freeze(obj);
  }
  for (key in obj) {
    value = obj[key];
    if (hasOwnProperty(key, obj) && isType(value) === 'Object') {
      deepFreeze(value);
    }
  }
  return obj;
};
out$.toString = toString = function(obj){
  return JSON.stringify(obj);
};
out$.parseString = parseString = curry(function(n, f, obj){
  return JSON.stringify(obj, f, 2);
});
out$.fromString = fromString = function(obj){
  return JSON.parse(obj);
};
out$.definePublic = definePublic = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      definePublic(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      writable: true,
      configurable: true
    });
  }
});
out$.definePrivate = definePrivate = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      definePrivate(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: false,
      writable: true,
      configurable: true
    });
  }
});
out$.defineStatic = defineStatic = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      defineStatic(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      writable: false,
      configurable: false
    });
  }
});
out$.defineMeta = defineMeta = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      defineMeta(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: false,
      writable: false,
      configurable: false
    });
  }
});