// Generated by LiveScript 1.2.0
'use strict';
var isType, curry, empty, clone, keys, values, each, map, filter, partition, mixin, deepMixin, keyOf, keysOf, findKey, findKeys, fromPairs, toPairs, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./prelude').isType;
curry = require('./func').curry;
out$.empty = empty = function(obj){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
out$.clone = clone = function(obj){
  return deepMixin(null, obj);
};
out$.keys = keys = function(obj){
  var k, results$ = [];
  for (k in obj) {
    results$.push(k);
  }
  return results$;
};
out$.values = values = function(obj){
  var i$, x, results$ = [];
  for (i$ in obj) {
    x = obj[i$];
    results$.push(x);
  }
  return results$;
};
out$.each = each = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    f(v, k);
  }
  return obj;
});
out$.map = map = curry(function(f, obj){
  var k, x, results$ = {};
  for (k in obj) {
    x = obj[k];
    results$[k] = f(x);
  }
  return results$;
});
out$.filter = filter = curry(function(f, object){
  var k, v, results$ = {};
  for (k in object) {
    v = object[k];
if (f(v, k)) {
      results$[k] = v;
    }
  }
  return results$;
});
out$.partition = partition = curry(function(f, object){
  var passed, failed, k, v;
  passed = {};
  failed = {};
  for (k in object) {
    v = object[k];
    (f(v, k) ? passed : failed)[k] = v;
  }
  return [passed, failed];
});
out$.mixin = mixin = function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      dest[key] = val;
    }
  }
  return dest;
};
out$.deepMixin = deepMixin = function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      if (isType('Object', dest[key]) && isType('Object', src[key])) {
        dest[key] = deepMixin(dest[key], src[key]);
      } else {
        dest[key] = val;
      }
    }
  }
  return dest;
};
out$.keyOf = keyOf = curry(function(elem, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (v === elem) {
      return k;
    }
  }
});
out$.keysOf = keysOf = curry(function(elem, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (v === elem) {
      results$.push(k);
    }
  }
  return results$;
});
out$.findKey = findKey = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (f(v, k)) {
      return k;
    }
  }
});
out$.findKeys = findKeys = curry(function(f, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (f(v, k)) {
      results$.push(k);
    }
  }
  return results$;
});
out$.fromPairs = fromPairs = function(xs){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
out$.toPairs = toPairs = function(obj){
  var key, value, results$ = [];
  for (key in obj) {
    value = obj[key];
    results$.push([key, value]);
  }
  return results$;
};