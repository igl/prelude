require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var isType, curry, empty, clone, each, map, filter, partition, unique, uniqueBy, flatten, difference, intersection, union, countBy, groupBy, sortBy, splitAt, indexOf, IndicesOf, findIndex, findIndices, range, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./type').isType;
curry = require('./func').curry;
out$.empty = empty = function(xs){
  return xs.length === 0;
};
out$.clone = clone = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(x);
  }
  return results$;
};
out$.each = each = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    f(x, i);
  }
  return xs;
});
out$.map = map = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    results$.push(f(x, i));
  }
  return results$;
});
out$.filter = filter = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x, i)) {
      results$.push(x);
    }
  }
  return results$;
});
out$.partition = partition = curry(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
out$.unique = unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
out$.uniqueBy = uniqueBy = curry(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
out$.flatten = flatten = curry(function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (isType('Array', x)) {
      result.push(flatten(x));
    } else {
      result.push(x);
    }
  }
  return result;
});
out$.difference = difference = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    result.push(x);
  }
  return result;
};
out$.intersection = intersection = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        if (!in$(x, ys)) {
          continue outer;
        }
      }
    }
    result.push(x);
  }
  return result;
};
out$.union = union = function(){
  var xss, result, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  result = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (in$(!x, result)) {
        result.push(x);
      }
    }
  }
  return result;
};
out$.countBy = countBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key] += 1;
    } else {
      result[key] = 1;
    }
  }
  return result;
});
out$.groupBy = groupBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key].push(x);
    } else {
      result[key] = [x];
    }
  }
  return result;
});
out$.sortBy = sortBy = curry(function(f, xs){
  return xs.concat().sort(function(x, y){
    var a, b;
    a = f(x);
    b = f(y);
    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    } else {
      return 0;
    }
  });
});
out$.splitAt = splitAt = curry(function(n, xs){
  if (n < 0) {
    n = 0;
  }
  return [xs.slice(0, n), xs.slice(n)];
});
out$.indexOf = indexOf = curry(function(elem, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      return i;
    }
  }
});
out$.IndicesOf = IndicesOf = curry(function(elem, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      results$.push(i);
    }
  }
  return results$;
});
out$.findIndex = findIndex = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
out$.findIndices = findIndices = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
out$.range = range = curry(2, function(a, b, inc){
  var i$, x, results$ = [];
  inc == null && (inc = 1);
  if (arguments.length === 1) {
    b = a || 0;
    a = 0;
  }
  for (i$ = a; inc < 0 ? i$ > b : i$ < b; i$ += inc) {
    x = i$;
    results$.push(x);
  }
  return results$;
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
},{"./func":2,"./type":5}],2:[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var cloneArray, curry, apply, chain, tryCatch, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
cloneArray = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(x);
  }
  return results$;
};
function applyNoContext(f, args){
  switch (args.length) {
  case 0:
    return f();
  case 1:
    return f(args[0]);
  case 2:
    return f(args[0], args[1]);
  case 3:
    return f(args[0], args[1], args[2]);
  case 4:
    return f(args[0], args[1], args[2], args[3]);
  case 5:
    return f(args[0], args[1], args[2], args[3], args[4]);
  case 6:
    return f(args[0], args[1], args[2], args[3], args[4], args[5]);
  case 7:
    return f(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
  case 8:
    return f(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
  case 9:
    return f(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
  default:
    return f.apply(void 8, args);
  }
}
function applyWithContext(context, f, args){
  switch (args.length) {
  case 0:
    return f.call(context);
  case 1:
    return f.call(context, args[0]);
  case 2:
    return f.call(context, args[0], args[1]);
  case 3:
    return f.call(context, args[0], args[1], args[2]);
  case 4:
    return f.call(context, args[0], args[1], args[2], args[3]);
  case 5:
    return f.call(context, args[0], args[1], args[2], args[3], args[4]);
  case 6:
    return f.call(context, args[0], args[1], args[2], args[3], args[4], args[5]);
  case 7:
    return f.call(context, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
  case 8:
    return f.call(context, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
  case 9:
    return f.call(context, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
  default:
    return f.apply(context, args);
  }
}
out$.curry = curry = function(n, fn){
  var _curry;
  if (typeof n === 'function') {
    fn = n;
    n = fn.length;
  }
  _curry = function(args){
    if (!(n > 1)) {
      return fn;
    } else {
      return function(){
        var params;
        params = cloneArray(args);
        if (params.push.apply(params, arguments) < n) {
          return _curry(params);
        } else {
          return applyNoContext(fn, params);
        }
      };
    }
  };
  return _curry([]);
};
out$.apply = apply = curry(2, function(f, args, context){
  if (context != null) {
    return applyWithContext(context, f, args);
  } else {
    return applyNoContext(f, args);
  }
});
out$.chain = chain = function(){
  var i$, fns, cb, link, e;
  fns = 0 < (i$ = arguments.length - 1) ? slice$.call(arguments, 0, i$) : (i$ = 0, []), cb = arguments[i$];
  link = function(e){
    var args;
    args = slice$.call(arguments, 1);
    if (e || fns.length === 0) {
      cb.apply(null, arguments);
    } else {
      try {
        applyNoContext(fns.shift(), args.concat(link));
      } catch (e$) {
        e = e$;
        cb(e);
      }
    }
  };
  try {
    fns.shift()(link);
  } catch (e$) {
    e = e$;
    cb(e);
  }
};
out$.tryCatch = tryCatch = function(fn, cb){
  var err, res, e;
  err = null;
  res = null;
  try {
    res = fn();
  } catch (e$) {
    e = e$;
    err = e instanceof Error
      ? e
      : new Error(e);
  }
  if (cb) {
    cb(err, res);
  }
  err || res;
};
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var isType, curry, empty, clone, keys, values, each, map, filter, partition, mixin, deepMixin, keyOf, keysOf, findKey, findKeys, fromPairs, toPairs, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./type').isType;
curry = require('./func').curry;
out$.empty = empty = function(obj){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
out$.clone = clone = function(obj){
  return deepMixin(null, obj);
};
out$.keys = keys = function(obj){
  var k, results$ = [];
  for (k in obj) {
    results$.push(k);
  }
  return results$;
};
out$.values = values = function(obj){
  var i$, x, results$ = [];
  for (i$ in obj) {
    x = obj[i$];
    results$.push(x);
  }
  return results$;
};
out$.each = each = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    f(v, k);
  }
  return obj;
});
out$.map = map = curry(function(f, obj){
  var k, x, results$ = {};
  for (k in obj) {
    x = obj[k];
    results$[k] = f(x);
  }
  return results$;
});
out$.filter = filter = curry(function(f, object){
  var k, v, results$ = {};
  for (k in object) {
    v = object[k];
if (f(v, k)) {
      results$[k] = v;
    }
  }
  return results$;
});
out$.partition = partition = curry(function(f, object){
  var passed, failed, k, v;
  passed = {};
  failed = {};
  for (k in object) {
    v = object[k];
    (f(v, k) ? passed : failed)[k] = v;
  }
  return [passed, failed];
});
out$.mixin = mixin = function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      dest[key] = val;
    }
  }
  return dest;
};
out$.deepMixin = deepMixin = function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      if (isType('Object', dest[key]) && isType('Object', src[key])) {
        dest[key] = deepMixin(dest[key], src[key]);
      } else {
        dest[key] = val;
      }
    }
  }
  return dest;
};
out$.keyOf = keyOf = curry(function(elem, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (v === elem) {
      return k;
    }
  }
});
out$.keysOf = keysOf = curry(function(elem, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (v === elem) {
      results$.push(k);
    }
  }
  return results$;
});
out$.findKey = findKey = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (f(v, k)) {
      return k;
    }
  }
});
out$.findKeys = findKeys = curry(function(f, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (f(v, k)) {
      results$.push(k);
    }
  }
  return results$;
});
out$.fromPairs = fromPairs = function(xs){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
out$.toPairs = toPairs = function(obj){
  var key, value, results$ = [];
  for (key in obj) {
    value = obj[key];
    results$.push([key, value]);
  }
  return results$;
};
},{"./func":2,"./type":5}],4:[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var curry, repeat, reverse, capitalize, capitalizeSentence, camelize, dasherize, out$ = typeof exports != 'undefined' && exports || this;
curry = require('./func').curry;
out$.repeat = repeat = curry(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
out$.reverse = reverse = function(str){
  return str.split('').reverse().join('');
};
out$.capitalize = capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
out$.capitalizeSentence = capitalizeSentence = function(str){
  return str.replace(/(^.|\s.)/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
out$.camelize = camelize = function(str){
  return str.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
out$.dasherize = dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    upper = upper.length > 1
      ? upper
      : upper.toLowerCase();
    return lower + '-' + upper;
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + '-';
    } else {
      return upper.toLowerCase();
    }
  });
};
},{"./func":2}],5:[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var curry, _toString, getType, isType, out$ = typeof exports != 'undefined' && exports || this;
curry = require('./func').curry;
_toString = Object.prototype.toString;
out$.getType = getType = function(o){
  return _toString.call(o).slice(8, -1);
};
out$.isType = isType = curry(function(t, o){
  return t === _toString.call(o).slice(8, -1);
});
},{"./func":2}],"prelude":[function(require,module,exports){
// Generated by LiveScript 1.2.0
'use strict';
var string, array, object, func, type, out$ = typeof exports != 'undefined' && exports || this;
out$.string = string = require('./string');
out$.array = array = require('./array');
out$.object = object = require('./object');
out$.func = func = require('./func');
out$.type = type = require('./type');
},{"./array":1,"./func":2,"./object":3,"./string":4,"./type":5}]},{},[]);
