require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var isType, ref$, curry, apply, random, empty, clone, head, tail, last, initial, each, slice, map, filter, flatten, shuffle, reverse, zip, zipWith, partition, unique, uniqueBy, difference, intersection, union, sortBy, countBy, groupBy, splitAt, indexOf, IndicesOf, findIndex, findIndices, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./types').isType;
ref$ = require('./funcs'), curry = ref$.curry, apply = ref$.apply;
random = require('./numbers').random;
out$.empty = empty = function(xs){
  return xs.length === 0;
};
out$.clone = clone = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(x);
  }
  return results$;
};
out$.head = head = function(xs){
  return xs[0];
};
out$.tail = tail = function(xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i > 0) {
      results$.push(x);
    }
  }
  return results$;
};
out$.last = last = function(xs){
  return xs[xs.length - 1];
};
out$.initial = initial = function(xs){
  var init, i$, len$, i, x, results$ = [];
  if (!(init = xs.length)) {
    return;
  }
  --init;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i < init) {
      results$.push(x);
    }
  }
  return results$;
};
out$.each = each = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    f(x, i);
  }
  return xs;
});
out$.slice = slice = curry(function(a, b, xs){
  var i$, len$, i, x;
  if (b < 0) {
    (b = xs.length - 1) + b;
  }
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    f(x, i);
  }
  return xs;
});
out$.map = map = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    results$.push(f(x, i));
  }
  return results$;
});
out$.filter = filter = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x, i)) {
      results$.push(x);
    }
  }
  return results$;
});
out$.flatten = flatten = curry(function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (isType('Array', x)) {
      result.push(flatten(x));
    } else {
      result.push(x);
    }
  }
  return result;
});
out$.shuffle = shuffle = function(xs){
  var result, i$, len$, i, x, r;
  result = new Array(xs.length);
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    r = random(i);
    if (r !== i) {
      result[i] = result[r];
    }
    result[r] = xs[i];
  }
  return result;
};
out$.reverse = reverse = function(xs){
  var result, i, len;
  result = [];
  i = 0;
  len = xs.length;
  while (len !== 0) {
    result[--len] = xs[i++];
  }
  return result;
};
out$.zip = zip = curry(2, function(){
  var args, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  args = slice$.call(arguments);
  minLength = 9e9;
  for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
    xs = args[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = args.length; j$ < len$; ++j$) {
      xs = args[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
});
out$.zipWith = zipWith = curry(3, function(f){
  var args, minLength, i$, len$, xs, ref$, i, results$ = [];
  args = slice$.call(arguments, 1);
  minLength = 9e9;
  for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
    xs = args[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(apply(f, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
});
out$.partition = partition = curry(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
out$.unique = unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
out$.uniqueBy = uniqueBy = curry(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
out$.difference = difference = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    result.push(x);
  }
  return result;
};
out$.intersection = intersection = function(xs){
  var yss, result, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  result = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        if (!in$(x, ys)) {
          continue outer;
        }
      }
    }
    result.push(x);
  }
  return result;
};
out$.union = union = function(){
  var xss, result, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  result = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (in$(!x, result)) {
        result.push(x);
      }
    }
  }
  return result;
};
out$.sortBy = sortBy = curry(function(f, xs){
  return xs.concat().sort(function(x, y){
    var a, b;
    a = f(x);
    b = f(y);
    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    } else {
      return 0;
    }
  });
});
out$.countBy = countBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key] += 1;
    } else {
      result[key] = 1;
    }
  }
  return result;
});
out$.groupBy = groupBy = curry(function(f, xs){
  var result, i$, len$, x, key;
  result = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in result) {
      result[key].push(x);
    } else {
      result[key] = [x];
    }
  }
  return result;
});
out$.splitAt = splitAt = curry(function(n, xs){
  if (n < 0) {
    n = 0;
  }
  return [xs.slice(0, n), xs.slice(n)];
});
out$.indexOf = indexOf = curry(function(elem, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      return i;
    }
  }
});
out$.IndicesOf = IndicesOf = curry(function(elem, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === elem) {
      results$.push(i);
    }
  }
  return results$;
});
out$.findIndex = findIndex = curry(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
out$.findIndices = findIndices = curry(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
},{"./funcs":2,"./numbers":3,"./types":6}],2:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var _hasOwnProperty, curry, apply, applyTo, flip, chain, tryCatch, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
_hasOwnProperty = Object.prototype.hasOwnProperty;
function cloneArray(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(x);
  }
  return results$;
}
function reverseArray(xs){
  var result, i, len;
  result = [];
  i = 0;
  len = xs.length;
  while (len !== 0) {
    result[--len] = xs[i++];
  }
  return result;
}
function mixin(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      dest[key] = val;
    }
  }
  return dest;
}
out$.curry = curry = function(n, fn){
  var _curry;
  if (typeof n === 'function') {
    fn = n;
    n = fn.length;
  }
  _curry = function(args){
    if (!(n > 1)) {
      return fn;
    } else {
      return function(){
        var params;
        params = cloneArray(args);
        if (params.push.apply(params, arguments) < n && arguments.length) {
          return _curry(params);
        } else {
          return apply(fn, params);
        }
      };
    }
  };
  return _curry([]);
};
out$.apply = apply = function(f, xs){
  switch (xs.length) {
  case 0:
    return f();
  case 1:
    return f(xs[0]);
  case 2:
    return f(xs[0], xs[1]);
  case 3:
    return f(xs[0], xs[1], xs[2]);
  case 4:
    return f(xs[0], xs[1], xs[2], xs[3]);
  case 5:
    return f(xs[0], xs[1], xs[2], xs[3], xs[4]);
  case 6:
    return f(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]);
  case 7:
    return f(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]);
  case 8:
    return f(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]);
  case 9:
    return f(xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]);
  default:
    return f.apply(void 8, xs);
  }
};
out$.applyTo = applyTo = function(ctx, f, xs){
  switch (xs.length) {
  case 0:
    return f.call(ctx);
  case 1:
    return f.call(ctx, xs[0]);
  case 2:
    return f.call(ctx, xs[0], xs[1]);
  case 3:
    return f.call(ctx, xs[0], xs[1], xs[2]);
  case 4:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3]);
  case 5:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3], xs[4]);
  case 6:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]);
  case 7:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]);
  case 8:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]);
  case 9:
    return f.call(ctx, xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]);
  default:
    return f.apply(ctx, xs);
  }
};
out$.flip = flip = curry(2, function(f){
  var xs;
  xs = slice$.call(arguments, 1);
  return applyNoContext(f, reverseArray(xs));
});
out$.chain = chain = function(){
  var i$, fns, cb, link, e;
  fns = 0 < (i$ = arguments.length - 1) ? slice$.call(arguments, 0, i$) : (i$ = 0, []), cb = arguments[i$];
  link = function(e){
    var args;
    args = slice$.call(arguments, 1);
    if (e || fns.length === 0) {
      cb.apply(null, arguments);
    } else {
      try {
        applyNoContext(fns.shift(), args.concat(link));
      } catch (e$) {
        e = e$;
        cb(e);
      }
    }
  };
  try {
    fns.shift()(link);
  } catch (e$) {
    e = e$;
    cb(e);
  }
};
out$.tryCatch = tryCatch = function(fn, cb){
  var err, res, e;
  err = null;
  res = null;
  try {
    res = fn();
  } catch (e$) {
    e = e$;
    err = e instanceof Error
      ? e
      : new Error(e);
  }
  if (cb) {
    cb(err, res);
  }
  err || res;
};
function Class(){}
if (typeof Object.create === 'function') {
  Class.prototype = Object.create(null);
}
Class.extend = function(proto, props){
  var parent, child, Surrogate;
  parent = this;
  child = proto && _hasOwnProperty.call(proto, 'constructor')
    ? proto.constructor
    : function(){
      return applyTo(this, parent, arguments);
    };
  mixin(child, parent, props);
  Surrogate = function(){
    return this.constructor = child;
  };
  Surrogate.prototype = parent.prototype;
  child.prototype = new Surrogate;
  if (proto) {
    mixin(child.prototype, proto);
  }
  return child;
};
out$.Class = Class;
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var curry, even, odd, random, range, gcd, lcm, out$ = typeof exports != 'undefined' && exports || this;
curry = require('./funcs').curry;
out$.even = even = function(x){
  return x % 2 === 0;
};
out$.odd = odd = function(x){
  return x % 2 !== 0;
};
out$.random = random = function(min, max){
  if (max == null) {
    max = min;
    min = 0;
  }
  return min + Math.floor(Math.random() * (max - min + 1));
};
out$.range = range = curry(2, function(a, b, inc){
  var i$, x, results$ = [];
  inc == null && (inc = 1);
  if (arguments.length === 1) {
    b = a || 0;
    a = 0;
  }
  for (i$ = a; inc < 0 ? i$ > b : i$ < b; i$ += inc) {
    x = i$;
    results$.push(x);
  }
  return results$;
});
out$.gcd = gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
out$.lcm = lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./funcs":2}],4:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var isType, curry, _hasOwnProperty, empty, clone, keys, values, each, map, filter, partition, keyOf, keysOf, findKey, findKeys, fromPairs, toPairs, hasOwnProperty, mixin, deepMixin, fill, deepFill, freeze, deepFreeze, toString, parseString, fromString, definePublic, definePrivate, defineStatic, defineMeta, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
isType = require('./types').isType;
curry = require('./funcs').curry;
_hasOwnProperty = Object.prototype.hasOwnProperty;
out$.empty = empty = function(obj){
  var k;
  for (k in obj) {
    return false;
  }
  return true;
};
out$.clone = clone = function(obj){
  return deepMixin(null, obj);
};
out$.keys = keys = function(obj){
  var k, results$ = [];
  for (k in obj) {
    results$.push(k);
  }
  return results$;
};
out$.values = values = function(obj){
  var i$, v, results$ = [];
  for (i$ in obj) {
    v = obj[i$];
    results$.push(v);
  }
  return results$;
};
out$.each = each = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    f(v, k);
  }
  return obj;
});
out$.map = map = curry(function(f, obj){
  var k, v, resultObj$ = {};
  for (k in obj) {
    v = obj[k];
    resultObj$[k] = f(v, k);
  }
  return resultObj$;
});
out$.filter = filter = curry(function(f, object){
  var k, v, resultObj$ = {};
  for (k in object) {
    v = object[k];
if (f(v, k)) {
      resultObj$[k] = v;
    }
  }
  return resultObj$;
});
out$.partition = partition = curry(function(f, object){
  var passed, failed, k, v;
  passed = {};
  failed = {};
  for (k in object) {
    v = object[k];
    (f(v, k) ? passed : failed)[k] = v;
  }
  return [passed, failed];
});
out$.keyOf = keyOf = curry(function(elem, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (v === elem) {
      return k;
    }
  }
});
out$.keysOf = keysOf = curry(function(elem, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (v === elem) {
      results$.push(k);
    }
  }
  return results$;
});
out$.findKey = findKey = curry(function(f, obj){
  var k, v;
  for (k in obj) {
    v = obj[k];
    if (f(v, k)) {
      return k;
    }
  }
});
out$.findKeys = findKeys = curry(function(f, obj){
  var i$, len$, v, k, results$ = [];
  for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
    v = i$;
    k = obj[i$];
    if (f(v, k)) {
      results$.push(k);
    }
  }
  return results$;
});
out$.fromPairs = fromPairs = function(xs){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
out$.toPairs = toPairs = function(obj){
  var key, value, results$ = [];
  for (key in obj) {
    value = obj[key];
    results$.push([key, value]);
  }
  return results$;
};
out$.hasOwnProperty = hasOwnProperty = curry(function(key, obj){
  return _hasOwnProperty.call(obj, key);
});
out$.mixin = mixin = curry(2, function(dest){
  var sources, i$, len$, src, key, val;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (key in src) {
      val = src[key];
      dest[key] = val;
    }
  }
  return dest;
});
out$.deepMixin = deepMixin = curry(2, function(dest){
  var sources, i$, len$, src, k, v;
  dest == null && (dest = {});
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in src) {
      v = src[k];
      if (isType('Object', dest[k]) && isType('Object', v)) {
        dest[k] = deepMixin(dest[k], v);
      } else {
        dest[k] = v;
      }
    }
  }
  return dest;
});
out$.fill = fill = curry(2, function(dest){
  var sources, i$, len$, src, k;
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in dest) {
      if (src[k] != null) {
        dest[k] = src[k];
      }
    }
  }
  return dest;
});
out$.deepFill = deepFill = curry(2, function(dest){
  var sources, i$, len$, src, k;
  sources = slice$.call(arguments, 1);
  for (i$ = 0, len$ = sources.length; i$ < len$; ++i$) {
    src = sources[i$];
    for (k in dest) {
      if (dest[k] != null) {
        if (isType('Object', dest[key]) && isType('Object', v)) {
          dest[k] = deepFill(dest[k], src[k]);
        } else {
          dest[k] = src[k];
        }
      }
    }
  }
  return dest;
});
out$.freeze = freeze = function(obj){
  return Object.freeze(obj);
};
out$.deepFreeze = deepFreeze = function(obj){
  var key, value;
  if (!Object.isFrozen(obj)) {
    Object.freeze(obj);
  }
  for (key in obj) {
    value = obj[key];
    if (hasOwnProperty(key, obj) && isType(value) === 'Object') {
      deepFreeze(value);
    }
  }
  return obj;
};
out$.toString = toString = function(obj){
  return JSON.stringify(obj);
};
out$.parseString = parseString = curry(function(n, f, obj){
  return JSON.stringify(obj, f, 2);
});
out$.fromString = fromString = function(obj){
  return JSON.parse(obj);
};
out$.definePublic = definePublic = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      definePublic(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key({
      value: value,
      enumerable: true,
      writable: true,
      configurable: true
    }));
  }
});
out$.definePrivate = definePrivate = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      definePrivate(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key({
      value: value,
      enumerable: false,
      writable: true,
      configurable: true
    }));
  }
});
out$.defineStatic = defineStatic = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      defineStatic(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key({
      value: value,
      enumerable: true,
      writable: false,
      configurable: false
    }));
  }
});
out$.defineMeta = defineMeta = curry(function(obj, key, value){
  var k, v;
  if (isType('Object', key)) {
    for (k in key) {
      v = key[k];
      defineMeta(obj, k, v);
    }
    return obj;
  } else {
    return Object.defineProperty(obj, key({
      value: value,
      enumerable: false,
      writable: false,
      configurable: false
    }));
  }
});
},{"./funcs":2,"./types":6}],5:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var curry, arrays, repeat, reverse, capitalize, capitalizeSentence, camelize, dasherize, out$ = typeof exports != 'undefined' && exports || this;
curry = require('./funcs').curry;
arrays = require('./arrays');
out$.repeat = repeat = curry(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
out$.reverse = reverse = function(str){
  return arrays.reverse(str).join('');
};
out$.capitalize = capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
out$.capitalizeSentence = capitalizeSentence = function(str){
  return str.replace(/(^.|\s.)/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
out$.camelize = camelize = function(str){
  return str.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
out$.dasherize = dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    upper = upper.length > 1
      ? upper
      : upper.toLowerCase();
    return lower + '-' + upper;
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + '-';
    } else {
      return upper.toLowerCase();
    }
  });
};
},{"./arrays":1,"./funcs":2}],6:[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var curry, _toString, getType, isType, out$ = typeof exports != 'undefined' && exports || this;
curry = require('./funcs').curry;
_toString = Object.prototype.toString;
out$.getType = getType = function(o){
  return _toString.call(o).slice(8, -1);
};
out$.isType = isType = curry(function(t, o){
  return t === _toString.call(o).slice(8, -1);
});
},{"./funcs":2}],"prelude":[function(require,module,exports){
// Generated by LiveScript 1.3.0
'use strict';
var strings, numbers, arrays, objects, funcs, types, out$ = typeof exports != 'undefined' && exports || this;
out$.strings = strings = require('./strings');
out$.numbers = numbers = require('./numbers');
out$.arrays = arrays = require('./arrays');
out$.objects = objects = require('./objects');
out$.funcs = funcs = require('./funcs');
out$.types = types = require('./types');
},{"./arrays":1,"./funcs":2,"./numbers":3,"./objects":4,"./strings":5,"./types":6}]},{},[]);
